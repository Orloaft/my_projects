$orbitItemSize: 1.6em;
$map: (ring-0: 4, ring-1: 3, ring-2: 8, ring-3: 3);
$lastRing: 3;

* {
  box-sizing: border-box;
}

html {
  font-size: 100%;
}
.hero-text{
  position: absolute;
  top: 100%;
  left: 10%;
  width: 300px;
  height: 200px;
  opacity: 0;
  transition: top 1.6s ease-in-out;

}
.orbit {
  position: absolute;
  z-index: 5;
  background:transparent;
  float: left;
  width: 100%;
  min-width: 100vw;
  min-height:100vh;
}

.orbit-icon {
  width: $orbitItemSize;
  height: $orbitItemSize;
  line-height: $orbitItemSize;
  font-size: 1.2em;
  border-radius: 50%;
  background: #ccc;
  color: #fff;
  text-align: center;
  display: block;
}
.socials{
  pointer-events: none;
  display: flex;
  flex-direction: row;
  position: absolute;
  bottom:100%;
  transition: bottom 1.6s ease-in-out;
  z-index: 3;
  opacity: 0;
}
.orbit-wrap {
  margin:0;
 
  list-style: none;
  font-size: 1.3em;
  
  > li {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    
    &:hover {
      ul {
        border-width: 2px;
        border-color: #fff;
      }
      ~ li ul {
        border-color: rgba(255, 255, 255, 0.2);
        li {
          opacity: 0.4;          
        }
      }
    }
    
  }
}

ul[class^=ring] {
  @extend %ring;
  transition: all 300ms ease-in-out;
  li {
    @extend %orbiting-object;
    transition: all 300ms ease-in-out;
  }
}

@mixin orbit-item($numItems, $numRing) {
  @for $s from 1 through $numItems {  
    // Spread items over the ring
    $deg: 380deg / $numItems;
    
    .ring-#{$numRing} > *:nth-of-type(#{$s}) {
      transform: rotate($s * $deg) translate(12.5em - ($numRing * 2.5)) rotate(-$s * $deg);
    }
  }
}

// Render rings
@for $i from 0 through $lastRing {  
  .ring-#{$i} {
    // decrease each ring in size
    width: 25em - ($i * 5);
    height: 25em - ($i * 5);
    animation: clockwiseRotate 35s - ($i * 5) linear infinite;
    
   div {
      animation: counterClockwiseRotate 35s - ($i * 5) linear infinite;
    }
  }
  
  @include orbit-item(map-get($map, ring-#{$i}), $i);
}


%ring {
  border: solid 4px  #17effeb4;
  position: relative;
  padding: 0;
  border-radius: 50%;
  list-style: none;
  box-sizing: content-box;
}

%orbiting-object {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  width: $orbitItemSize;
  height: $orbitItemSize;
  margin: -$orbitItemSize / 2;
}

/*
  center;
*/
.orbit-center {
  z-index: 5;
  font-size: 2em;
  width: 3.8em;
  height: 3.8em;
  line-height: 1.8em;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #8FD3FF;
  border-radius: 50%;
  transition: all .8s ease-in-out;
  &:hover {
   
    transform: scale(3.5);

  }
  &:hover .socials{
    display: flex;
    flex-direction: column;
    bottom:0;
    left:0;
    transform: scale(.6);
    z-index: 3;
    pointer-events: all;
    opacity: 1;
  }
}
.orbit-center:hover + .hero-text {
  opacity: 1;
  top:10%;
  
 }
.orbit-wrap > li.orbit-center:hover ~ li > ul {
  width: 0;
  height: 0;
  * {
    transform: translate(0, 0);
  }
}

/* 
animations 
*/
@keyframes clockwiseRotate {
    from {
        transform: rotate(0deg)
    }
    to {
        transform: rotate(360deg)
    }
}

@keyframes counterClockwiseRotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
      transform: rotate(-360deg);
  }
}






html,
body {
  padding: 0;
  margin: 0;
  font-family: RussoOne;
  overflow-y: hidden;
}
a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

.bg {
  animation: slide 3s ease-in-out infinite alternate;
  background-image: linear-gradient(
    -60deg,
    rgb(138, 92, 247) 50%,
    rgb(82, 179, 218) 50%
  );
  bottom: 0;
  left: -50%;
  opacity: 0.5;
  position: fixed;
  right: -50%;
  top: 0;
  z-index: -1;
}

.bg2 {
  animation-direction: alternate-reverse;
  animation-duration: 4s;
}

.bg3 {
  animation-duration: 5s;
}

.content {
  // position: relative;
  /* background-color: rgba(255, 255, 255, 0.8);
  border-radius: 0.25em;
  box-shadow: 0 0 0.25em rgba(0, 0, 0, 0.25);
  box-sizing: border-box;
  left: 50%;
  padding: 10vmin;
  position: fixed;
  text-align: center;
  top: 50%;
  transform: translate(-50%, -50%); */
}

h1 {
  font-family: monospace;
}

@keyframes slide {
  0% {
    transform: translateX(-25%);
  }
  100% {
    transform: translateX(25%);
  }
}
@font-face {
  font-family: "RussoOne";
  src: local("RussoOne"),
    url("../public/fonts/RussoOne-Regular.woff2") format("truetype");
  font-weight: bold;
}
footer div:hover {
  transform: scale(2);
  transition: 0.8s ease-in-out;
}
a {
  font-size: 1rem;
  border-radius: 0.5rem;
  background-color: black;
  max-width: 40%;
}
@media (min-width: 48rem) {
  .mobile_link {
    display: none;
  }
}
/* 
icons 
*/
$icons : (
  ('heart-o', #b71c1c, white),
  ('coffee', #4CAF50, #CDDC39),
  ('safari', white, darkslateblue),
  ('firefox', #1565c0, #ff8f00),
  ('chrome', #fbc02d, #ef6c00),
  ('edge', #03a9f4, white),
  ('android', snow, limegreen),
  ('apple', #444, white),
  ('linux', white, #222),
  ('windows', white, #03a9f4),
  ('terminal', #222, #fff),
  ('html5', white, #e65100),
  ('css3', white, #2196f3),
  ('git', #222, white),
  ('free-code-camp', green, white),
  ('meetup', red, white),
  ('podcast', red, white),
  ('codepen', #333, white)
);

@each $icon in $icons {
  .fa-#{nth($icon, 1)} {
    background: nth($icon, 2);
    color: nth($icon, 3);
  }
}
